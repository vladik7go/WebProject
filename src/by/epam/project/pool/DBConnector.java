package by.epam.project.pool;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

import org.apache.log4j.Logger;

import by.epam.project.resource.ConfigurationManager;

class DBConnector {
	public static Logger log = Logger.getLogger(DBConnector.class);
	Properties properties = new Properties();

	/*
	 * This method, return necessary data for creating connections. These
	 * actions separated in to the own method, in order to reduce numbers of
	 * access to external resources(only one time, when pool is creating).
	 */
	private String initConnectionProperties() {
		// Take URL from the properties file
		String url = ConfigurationManager.getProperty("db.url");

		// Filling properties.
		properties.setProperty("user",
		/*
		 * Properties is a subclass of Hashtable. It is used to maintain lists
		 * of values in which the key is a String and the value is also a
		 * String.
		 */
		ConfigurationManager.getProperty("db.user"));
		properties.setProperty("password",
				ConfigurationManager.getProperty("db.password"));
		properties.setProperty("useUnicode",
				ConfigurationManager.getProperty("db.useUnicode"));
		properties.setProperty("characterEncoding",
				ConfigurationManager.getProperty("db.encoding"));

		try {
			// Register the driver
			DriverManager.registerDriver(new com.mysql.jdbc.Driver());
			
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return url;

	}

	public Connection getConnection() {
		Connection connection = null;

		try {

			/*
			 * Create connection, using data, generated by method
			 * "initConnectionProperties" Thus, we do not make any access to the
			 * external resources. All actions already had been performed by
			 * "initConnectionProperties" method.(one time only, when pool is
			 * creating)
			 */
			connection = DriverManager.getConnection(
					initConnectionProperties(), properties);

		} catch (SQLException e) {
			log.error("Technical Exception", e);
		}

		return connection;
	}
}